/*
 * CSS custom properties define the colour palette used throughout the app.
 * Changing these values in one place updates the look consistently.
 */
:root {
  --color-bg: #f8f0fa;       /* page background colour */
  --color-chat-bg: #f4e7fb;  /* chat container background colour */
  --color-user: #e91e63;     /* accent colour for user messages */
  --color-bot: #673ab7;      /* accent colour for bot messages */
  --color-accent: #ffd700;   /* accent colour for buttons and borders */
}

/*
 * Base styles for the document body.  We use flexbox to centre the
 * chat container both horizontally and vertically and set a pleasant
 * background colour.  The font family is a modern sans‑serif.
 */
body {
  background-color: var(--color-bg);
  margin: 0;
  font-family: 'Segoe UI', sans-serif;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;

  /*
   * The original CSS attempted to set a background image from
   * ``images/background.jpg``, but there is no such file in the repository.
   * Referencing a missing asset causes 404s and prevents the page from
   * loading cleanly.  If you wish to customise the page with a background
   * image, add the image under ``frontend/images/`` and update the path
   * accordingly.  For now, fall back to a solid colour defined by
   * ``--color-bg``.
   */
  /* background-image: url("images/background.jpg"); */
  /* background-size: cover;
  background-position: center;
  background-repeat: no-repeat; */
}

/*
 * The container that wraps the entire chat interface.  It has a fixed
 * width and minimum height and can be resized by the user (thanks to
 * ``resize: both``).  We position it off the top-left of the viewport
 * slightly for visual interest.
 */
.chat-container {
  position: absolute;
  top: 10%;
  left: 10%;
  width: 400px;
  min-height: 500px;
  background-color: var(--color-chat-bg);
  border: 2px solid var(--color-accent);
  border-radius: 10px;
  box-shadow: 0 0 15px rgba(0,0,0,0.2);
  display: flex;
  flex-direction: column;
  resize: both;
  overflow: auto;
}

/*
 * The header bar at the top of the chat container.  It displays the
 * assistant's name and is styled to stand out from the rest of the
 * container.  ``cursor: grab`` hints that it could be draggable in
 * future versions.
 */
.chat-header {
  background-color: var(--color-bot);
  color: white;
  padding: 0.75rem;
  font-weight: bold;
  cursor: grab;
  border-top-left-radius: 10px;
  border-top-right-radius: 10px;
  user-select: none;
}

/*
 * The scrollable region that holds all the message bubbles.  It's a
 * flex container so messages stack vertically and stretch to fill the
 * available width.  ``overflow-y: auto`` adds a scrollbar when needed.
 */
.chat-window {
  flex: 1;
  overflow-y: auto;
  padding: 1rem;
  display: flex;
  flex-direction: column;
}

/*
 * Base styles for individual message bubbles.  Margins separate
 * messages from each other, padding gives them breathing room, and
 * ``border-radius`` rounds the corners.
 */
.message {
  margin: 0.5rem 0;
  padding: 0.75rem;
  border-radius: 10px;
  max-width: 75%;
  font-size: 1rem;
  line-height: 1.4;
  word-wrap: break-word;
}

/*
 * Overrides for user messages.  User messages align to the right (via
 * ``align-self: flex-end``) and have a pink tinted background.
 */
.message.user {
  background-color: rgba(233, 30, 99, 0.15);
  color: var(--color-user);
  align-self: flex-end;
}

/*
 * Overrides for bot messages.  Bot messages align to the left and use
 * a purple tinted background to differentiate them from user messages.
 */
.message.bot {
  background-color: rgba(103, 58, 183, 0.15);
  color: var(--color-bot);
  align-self: flex-start;
}

/*
 * Container for the input field and send button.  A border separates
 * this area from the chat window.
 */
.input-container {
  display: flex;
  padding: 1rem;
  border-top: 1px solid #ddd;
}

/*
 * Styles for the text input.  It grows to fill available horizontal space
 * thanks to ``flex: 1``.  Borders and padding make it feel like a
 * standard input control.
 */
input[type="text"] {
  flex: 1;
  padding: 0.6rem;
  font-size: 1rem;
  border: 1px solid #ccc;
  border-radius: 6px;
  outline: none;
}

/*
 * Styles for the send button.  The gold accent colour contrasts with
 * both message backgrounds.  A subtle transition makes the hover effect
 * feel smooth.
 */
.send-button {
  background-color: var(--color-accent);
  border: none;
  color: #000;
  padding: 0.6rem 1.2rem;
  font-size: 1rem;
  font-weight: bold;
  cursor: pointer;
  margin-left: 0.5rem;
  border-radius: 6px;
  transition: background-color 0.2s ease-in-out;
}

/*
 * Darken the send button on hover to give feedback that it's clickable.
 */
.send-button:hover {
  background-color: #e6c200;
}

/*
 * Remove the bot avatar bubble.  Previously the ``.message.bot`` rules
 * introduced a circular icon on the left of each bot message via a
 * ``::before`` pseudo-element and extra padding.  Users requested a
 * cleaner look with no symbol next to the text, so those styles have
 * been commented out.  If you later want to restore the avatar,
 * uncomment the CSS below and ensure ``avatar.png`` exists in the
 * same folder as ``style.css``.
 */
/* .message.bot {
  position: relative;           / * allow absolute-positioned avatar * /
  padding-left: 3rem;           / * space for the avatar circle * /
}

.message.bot::before {
  content: "";
  position: absolute;
  left: 0.6rem;
  top: 50%;
  transform: translateY(-50%);
  width: 2.2rem;
  height: 2.2rem;
  border-radius: 50%;
  background-image: url("avatar.png"); / * since avatar.png is in same folder as style.css * /
  background-size: cover;
  background-position: center;
  box-shadow: 0 0 4px rgba(0,0,0,0.25);
  pointer-events: none;
} */

/* (optional) user avatar — only works if you later add a user.png */
/*
 * The user avatar CSS below has been commented out because there is no
 * ``user.png`` in this repository.  If you add such an image, you can
 * re‑enable these rules to display an avatar on messages sent by the user.
 */
/*
.message.user {
  position: relative;
  padding-right: 3rem;
}
.message.user::after {
  content: "";
  position: absolute;
  right: 0.6rem;
  top: 50%;
  transform: translateY(-50%);
  width: 2.2rem;
  height: 2.2rem;
  border-radius: 50%;
  background-image: url("user.png");
  background-size: cover;
  background-position: center;
  box-shadow: 0 0 4px rgba(0,0,0,0.25);
  pointer-events: none;
}
*/
